
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace cent_log_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 47, column 4 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 49, column 4 to column 20)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 51, column 4 to column 23)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 53, column 4 to column 24)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 57, column 3 to column 31)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 77, column 4 to column 26)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 79, column 8 to column 117)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 78, column 22 to line 80, column 5)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 78, column 4 to line 80, column 5)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 62, column 4 to column 31)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 63, column 4 to column 27)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 64, column 4 to column 35)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 65, column 4 to column 57)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 68, column 16 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 68, column 4 to column 19)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 70, column 8 to column 94)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 71, column 8 to column 44)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 69, column 18 to line 72, column 5)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 69, column 4 to line 72, column 5)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 21, column 4 to column 10)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 23, column 11 to column 12)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 23, column 4 to column 16)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 25, column 11 to column 12)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 25, column 4 to column 16)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 27, column 4 to column 19)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 28, column 4 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 29, column 4 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 30, column 4 to column 23)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 31, column 4 to column 26)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 33, column 4 to column 14)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 35, column 15 to column 20)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 35, column 4 to column 22)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 39, column 9 to column 10)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 39, column 2 to column 18)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 40, column 9 to column 10)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 40, column 2 to column 18)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 41, column 2 to column 32)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 42, column 2 to column 32)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 77, column 19 to column 24)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 12, column 8 to column 118)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 13, column 8 to column 79)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 14, column 8 to column 27)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/cent_log.stan', line 11, column 7 to line 15, column 5)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__,
T7__>>
logistic_growth(const T0__& t, const T1__& K, const T2__& lambda,
                const T3__& y_0, const T4__& y_m, const T5__& y_std,
                const T6__& t_m, const T7__& t_std, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__,
          T6__,
          T7__>>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ num;
    num = DUMMY_VAR__;
    
    current_statement__ = 40;
    num = (((K * y_0) * stan::math::exp((lambda * ((t * t_std) + t_m)))) -
            (y_m *
              (K +
                (y_0 * (stan::math::exp((lambda * ((t * t_std) + t_m))) - 1)))));
    local_scalar_t__ denom;
    denom = DUMMY_VAR__;
    
    current_statement__ = 41;
    denom = (y_std *
              (K +
                (y_0 * (stan::math::exp((lambda * ((t * t_std) + t_m))) - 1))));
    current_statement__ = 42;
    return (num / denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_growth_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__,
T7__>>
operator()(const T0__& t, const T1__& K, const T2__& lambda, const T3__& y_0,
           const T4__& y_m, const T5__& y_std, const T6__& t_m,
           const T7__& t_std, std::ostream* pstream__)  const 
{
return logistic_growth(t, K, lambda, y_0, y_m, y_std, t_m, t_std, pstream__);
}
};

class cent_log_model final : public model_base_crtp<cent_log_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> t__;
  Eigen::Matrix<double, -1, 1> y__;
  double y_0_sigma;
  double K_sigma;
  double sigma_sigma;
  double log_lambda_mu;
  double log_lambda_sigma;
  int N_ppc;
  std::vector<double> t_ppc;
  Eigen::Matrix<double, -1, 1> t_std__;
  Eigen::Matrix<double, -1, 1> y_std__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> t{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> t_std{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_std{nullptr, 0};
 
 public:
  ~cent_log_model() { }
  
  inline std::string model_name() const final { return "cent_log_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  cent_log_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "cent_log_model_namespace::cent_log_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      validate_non_negative_index("t", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","t","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      t__ = Eigen::Matrix<double, -1, 1>(N);
      new (&t) Eigen::Map<Eigen::Matrix<double, -1, 1>>(t__.data(), N);
      
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 22;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 24;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      context__.validate_dims("data initialization","y_0_sigma","double",
           std::vector<size_t>{});
      y_0_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      y_0_sigma = context__.vals_r("y_0_sigma")[(1 - 1)];
      current_statement__ = 26;
      context__.validate_dims("data initialization","K_sigma","double",
           std::vector<size_t>{});
      K_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      K_sigma = context__.vals_r("K_sigma")[(1 - 1)];
      current_statement__ = 27;
      context__.validate_dims("data initialization","sigma_sigma","double",
           std::vector<size_t>{});
      sigma_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      sigma_sigma = context__.vals_r("sigma_sigma")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","log_lambda_mu","double",
           std::vector<size_t>{});
      log_lambda_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      log_lambda_mu = context__.vals_r("log_lambda_mu")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","log_lambda_sigma",
          "double", std::vector<size_t>{});
      log_lambda_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      log_lambda_sigma = context__.vals_r("log_lambda_sigma")[(1 - 1)];
      current_statement__ = 30;
      context__.validate_dims("data initialization","N_ppc","int",
           std::vector<size_t>{});
      N_ppc = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      N_ppc = context__.vals_i("N_ppc")[(1 - 1)];
      current_statement__ = 31;
      validate_non_negative_index("t_ppc", "N_ppc", N_ppc);
      current_statement__ = 32;
      context__.validate_dims("data initialization","t_ppc","double",
           std::vector<size_t>{static_cast<size_t>(N_ppc)});
      t_ppc = std::vector<double>(N_ppc, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 32;
      t_ppc = context__.vals_r("t_ppc");
      current_statement__ = 33;
      validate_non_negative_index("t_std", "N", N);
      current_statement__ = 34;
      t_std__ = Eigen::Matrix<double, -1, 1>(N);
      new (&t_std) Eigen::Map<Eigen::Matrix<double, -1, 1>>(t_std__.data(), N);
      stan::math::fill(t_std, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 35;
      validate_non_negative_index("y_std", "N", N);
      current_statement__ = 36;
      y_std__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y_std) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_std__.data(), N);
      stan::math::fill(y_std, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 37;
      assign(t_std, divide(subtract(t, mean(t)), sd(t)),
        "assigning variable t_std");
      current_statement__ = 38;
      assign(y_std, divide(subtract(y, mean(y)), sd(y)),
        "assigning variable y_std");
      current_statement__ = 39;
      validate_non_negative_index("y_predict", "N_ppc", N_ppc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cent_log_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ K;
      K = DUMMY_VAR__;
      
      current_statement__ = 1;
      K = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ log_lambda;
      log_lambda = DUMMY_VAR__;
      
      current_statement__ = 2;
      log_lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ y_0;
      y_0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      y_0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ lambda;
      lambda = DUMMY_VAR__;
      
      current_statement__ = 5;
      lambda = pow(10, log_lambda);
      {
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(y_0, 0, y_0_sigma));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(K, 0, K_sigma));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, sigma_sigma));
        current_statement__ = 13;
        lp_accum__.add(
          normal_lpdf<propto__>(log_lambda, log_lambda_mu, log_lambda_sigma));
        current_statement__ = 14;
        validate_non_negative_index("y_theo", "N", N);
        std::vector<local_scalar_t__> y_theo;
        y_theo = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
        
        current_statement__ = 19;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 16;
          assign(y_theo,
            logistic_growth(rvalue(t_std, "t_std", index_uni(i)), K, lambda,
              y_0, mean(y), sd(y), mean(t), sd(t), pstream__),
            "assigning variable y_theo", index_uni(i));
          current_statement__ = 17;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(y_std, "y_std", index_uni(i)),
              rvalue(y_theo, "y_theo", index_uni(i)), sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cent_log_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double K;
      K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_lambda = in__.template read<local_scalar_t__>();
      double y_0;
      y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double lambda;
      lambda = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(K);
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(y_0);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      lambda = pow(10, log_lambda);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(lambda);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_predict;
      y_predict = std::vector<double>(N_ppc, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 9;
      for (int i = 1; i <= N_ppc; ++i) {
        current_statement__ = 7;
        assign(y_predict,
          normal_rng(
            logistic_growth(rvalue(t_ppc, "t_ppc", index_uni(i)), K, lambda,
              y_0, mean(y), sd(y), mean(t), sd(t), pstream__), sigma,
            base_rng__), "assigning variable y_predict", index_uni(i));
      }
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        vars__.emplace_back(y_predict[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double K;
      K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K = context__.vals_r("K")[(1 - 1)];
      double K_free__;
      K_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      K_free__ = stan::math::lb_free(K, 0);
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_lambda = context__.vals_r("log_lambda")[(1 - 1)];
      double y_0;
      y_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0 = context__.vals_r("y_0")[(1 - 1)];
      double y_0_free__;
      y_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      y_0_free__ = stan::math::lb_free(y_0, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(K_free__);
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(y_0_free__);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"K", "log_lambda", "y_0", "sigma",
      "lambda", "y_predict"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_ppc)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "K");
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "y_0");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "K");
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "y_0");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_ppc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_ppc) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_ppc) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = cent_log_model_namespace::cent_log_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return cent_log_model_namespace::profiles__;
}

#endif


