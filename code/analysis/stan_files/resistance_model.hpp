
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace resistance_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 59> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 76, column 2 to column 18)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 85, column 2 to column 14)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 77, column 2 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 78, column 2 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 79, column 2 to column 15)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 80, column 2 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 81, column 2 to column 22)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 82, column 2 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 83, column 2 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 84, column 2 to column 15)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 87, column 6 to column 25)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 88, column 6 to column 72)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 86, column 16 to line 89, column 3)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 86, column 2 to line 89, column 3)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 53, column 4 to column 13)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 54, column 4 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 55, column 4 to column 11)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 56, column 4 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 57, column 4 to column 18)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 58, column 4 to column 13)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 59, column 4 to column 13)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 60, column 4 to column 10)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 61, column 14 to column 15)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 61, column 4 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 66, column 2 to column 20)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 67, column 2 to column 17)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 68, column 2 to column 14)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 69, column 2 to column 13)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 85, column 9 to column 10)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 13, column 7 to column 43)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 14, column 7 to column 72)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 15, column 7 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 16, column 7 to column 24)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 17, column 7 to column 36)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 18, column 7 to column 39)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 19, column 7 to column 46)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 20, column 7 to column 30)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 21, column 7 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 22, column 7 to column 37)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 23, column 7 to column 40)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 24, column 7 to column 27)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 25, column 7 to column 41)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 26, column 7 to column 38)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 27, column 7 to column 30)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 28, column 7 to column 42)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 29, column 7 to column 30)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 30, column 7 to column 21)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 31, column 7 to column 23)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 32, column 7 to column 41)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 33, column 7 to column 31)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 34, column 7 to column 31)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 36, column 7 to column 29)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 37, column 7 to column 99)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 12, column 4 to line 38, column 4)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 45, column 2 to column 14)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 46, column 2 to column 100)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 47, column 2 to column 11)",
 " (in '/Users/tomroschinger/git/fit_seq/code/analysis/resistance_model.stan', line 44, column 19 to line 48, column 1)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__,
T8__>>
poly(const T0__& K_d, const T1__& kappa_t, const T2__& j,
     const T3__& delta_r, const T4__& lambda_0, const T5__& K_M,
     const T6__& V_0, const T7__& a_ex, const T8__& lambda,
     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__,
          T6__,
          T7__,
          T8__>>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ c_1;
    c_1 = DUMMY_VAR__;
    
    current_statement__ = 30;
    c_1 = ((K_d * kappa_t) * delta_r);
    local_scalar_t__ a_4;
    a_4 = DUMMY_VAR__;
    
    current_statement__ = 31;
    a_4 = (((c_1 * delta_r) / pow(lambda_0, 2)) -
            ((K_M * delta_r) / lambda_0));
    Eigen::Matrix<local_scalar_t__, -1, 1> a_3;
    a_3 = Eigen::Matrix<local_scalar_t__, -1, 1>(5);
    stan::math::fill(a_3, DUMMY_VAR__);
    
    current_statement__ = 33;
    assign(a_3, -pow(c_1, 2), "assigning variable a_3", index_uni(1));
    current_statement__ = 34;
    assign(a_3, ((c_1 * K_M) / lambda_0),
      "assigning variable a_3", index_uni(2));
    current_statement__ = 35;
    assign(a_3, ((c_1 * V_0) / pow(lambda_0, 2)),
      "assigning variable a_3", index_uni(3));
    current_statement__ = 36;
    assign(a_3, (((-2 * c_1) * delta_r) / lambda_0),
      "assigning variable a_3", index_uni(4));
    current_statement__ = 37;
    assign(a_3, (K_M * delta_r), "assigning variable a_3", index_uni(5));
    Eigen::Matrix<local_scalar_t__, -1, 1> a_2;
    a_2 = Eigen::Matrix<local_scalar_t__, -1, 1>(8);
    stan::math::fill(a_2, DUMMY_VAR__);
    
    current_statement__ = 39;
    assign(a_2, ((2 * pow(c_1, 2)) / lambda_0),
      "assigning variable a_2", index_uni(1));
    current_statement__ = 40;
    assign(a_2, ((-j * pow(c_1, 2)) / pow(lambda_0, 2)),
      "assigning variable a_2", index_uni(2));
    current_statement__ = 41;
    assign(a_2, (-c_1 * K_M), "assigning variable a_2", index_uni(3));
    current_statement__ = 42;
    assign(a_2, (((j * K_M) * c_1) / lambda_0),
      "assigning variable a_2", index_uni(4));
    current_statement__ = 43;
    assign(a_2, ((-V_0 * c_1) / lambda_0),
      "assigning variable a_2", index_uni(5));
    current_statement__ = 44;
    assign(a_2, (c_1 * delta_r), "assigning variable a_2", index_uni(6));
    current_statement__ = 45;
    assign(a_2, (((c_1 * a_ex) * j) / lambda_0),
      "assigning variable a_2", index_uni(7));
    current_statement__ = 46;
    assign(a_2, ((K_M * a_ex) * j), "assigning variable a_2", index_uni(8));
    Eigen::Matrix<local_scalar_t__, -1, 1> a_1;
    a_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
    stan::math::fill(a_1, DUMMY_VAR__);
    
    current_statement__ = 48;
    assign(a_1, -pow(c_1, 2), "assigning variable a_1", index_uni(1));
    current_statement__ = 49;
    assign(a_1, (((2 * pow(c_1, 2)) * j) / lambda_0),
      "assigning variable a_1", index_uni(2));
    current_statement__ = 50;
    assign(a_1, ((-c_1 * j) * K_M), "assigning variable a_1", index_uni(3));
    current_statement__ = 51;
    assign(a_1, ((c_1 * j) * a_ex), "assigning variable a_1", index_uni(4));
    local_scalar_t__ a_0;
    a_0 = DUMMY_VAR__;
    
    current_statement__ = 52;
    a_0 = (-pow(c_1, 2) * j);
    current_statement__ = 53;
    return (((((a_4 * pow(lambda, 4)) + (sum(a_3) * pow(lambda, 3))) +
               (sum(a_2) * pow(lambda, 2))) + (sum(a_1) * lambda)) + a_0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct poly_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__,
T8__>>
operator()(const T0__& K_d, const T1__& kappa_t, const T2__& j,
           const T3__& delta_r, const T4__& lambda_0, const T5__& K_M,
           const T6__& V_0, const T7__& a_ex, const T8__& lambda,
           std::ostream* pstream__)  const 
{
return poly(K_d, kappa_t, j, delta_r, lambda_0, K_M, V_0, a_ex, lambda,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
system(const T0__& y_arg__, const T1__& theta_arg__,
       const std::vector<T2__>& x_r, const std::vector<int>& x_i,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& y = to_ref(y_arg__);
  const auto& theta = to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> z;
    z = Eigen::Matrix<local_scalar_t__, -1, 1>(1);
    stan::math::fill(z, DUMMY_VAR__);
    
    current_statement__ = 56;
    assign(z,
      poly(rvalue(theta, "theta", index_uni(1)),
        rvalue(theta, "theta", index_uni(2)),
        rvalue(theta, "theta", index_uni(3)),
        rvalue(theta, "theta", index_uni(4)),
        rvalue(theta, "theta", index_uni(5)),
        rvalue(theta, "theta", index_uni(6)),
        rvalue(theta, "theta", index_uni(7)),
        rvalue(theta, "theta", index_uni(8)),
        rvalue(y, "y", index_uni(1)), pstream__),
      "assigning variable z", index_uni(1));
    current_statement__ = 57;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct system_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& y, const T1__& theta, const std::vector<T2__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return system(y, theta, x_r, x_i, pstream__);
}
};

class resistance_model_model final : public model_base_crtp<resistance_model_model> {

 private:
  double K_d;
  double kappa_t;
  double j;
  double delta_r;
  double lambda_0;
  double K_M;
  double V_0;
  int N;
  std::vector<double> a_ex;
  Eigen::Matrix<double, -1, 1> y_guess__;
  std::vector<double> x_r;
  std::vector<int> x_i; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_guess{nullptr, 0};
 
 public:
  ~resistance_model_model() { }
  
  inline std::string model_name() const final { return "resistance_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  resistance_model_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "resistance_model_model_namespace::resistance_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","K_d","double",
           std::vector<size_t>{});
      K_d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      K_d = context__.vals_r("K_d")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","kappa_t","double",
           std::vector<size_t>{});
      kappa_t = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      kappa_t = context__.vals_r("kappa_t")[(1 - 1)];
      current_statement__ = 17;
      context__.validate_dims("data initialization","j","double",
           std::vector<size_t>{});
      j = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      j = context__.vals_r("j")[(1 - 1)];
      current_statement__ = 18;
      context__.validate_dims("data initialization","delta_r","double",
           std::vector<size_t>{});
      delta_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      delta_r = context__.vals_r("delta_r")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization","lambda_0","double",
           std::vector<size_t>{});
      lambda_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      lambda_0 = context__.vals_r("lambda_0")[(1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization","K_M","double",
           std::vector<size_t>{});
      K_M = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      K_M = context__.vals_r("K_M")[(1 - 1)];
      current_statement__ = 21;
      context__.validate_dims("data initialization","V_0","double",
           std::vector<size_t>{});
      V_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      V_0 = context__.vals_r("V_0")[(1 - 1)];
      current_statement__ = 22;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 23;
      validate_non_negative_index("a_ex", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","a_ex","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      a_ex = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      a_ex = context__.vals_r("a_ex");
      current_statement__ = 25;
      y_guess__ = Eigen::Matrix<double, -1, 1>(1);
      new (&y_guess) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_guess__.data(), 1);
      stan::math::fill(y_guess, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(y_guess, 1, "assigning variable y_guess", index_uni(1));
      current_statement__ = 27;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 28;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 29;
      validate_non_negative_index("y", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "resistance_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(8);
      stan::math::fill(theta, DUMMY_VAR__);
      
      current_statement__ = 3;
      assign(theta, K_d, "assigning variable theta", index_uni(1));
      current_statement__ = 4;
      assign(theta, kappa_t, "assigning variable theta", index_uni(2));
      current_statement__ = 5;
      assign(theta, j, "assigning variable theta", index_uni(3));
      current_statement__ = 6;
      assign(theta, delta_r, "assigning variable theta", index_uni(4));
      current_statement__ = 7;
      assign(theta, lambda_0, "assigning variable theta", index_uni(5));
      current_statement__ = 8;
      assign(theta, K_M, "assigning variable theta", index_uni(6));
      current_statement__ = 9;
      assign(theta, V_0, "assigning variable theta", index_uni(7));
      current_statement__ = 10;
      assign(theta, 0, "assigning variable theta", index_uni(8));
      Eigen::Matrix<local_scalar_t__, -1, 1> y;
      y = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y, DUMMY_VAR__);
      
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 11;
        assign(theta, rvalue(a_ex, "a_ex", index_uni(i)),
          "assigning variable theta", index_uni(8));
        current_statement__ = 12;
        assign(y,
          rvalue(
            algebra_solver_newton(system_functor__(), y_guess, theta, x_r, x_i,
  pstream__),
            "algebra_solver_newton(system, y_guess, theta, x_r,\nx_i)",
            index_uni(1)), "assigning variable y", index_uni(i));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "resistance_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(8);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y;
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      assign(theta, K_d, "assigning variable theta", index_uni(1));
      current_statement__ = 4;
      assign(theta, kappa_t, "assigning variable theta", index_uni(2));
      current_statement__ = 5;
      assign(theta, j, "assigning variable theta", index_uni(3));
      current_statement__ = 6;
      assign(theta, delta_r, "assigning variable theta", index_uni(4));
      current_statement__ = 7;
      assign(theta, lambda_0, "assigning variable theta", index_uni(5));
      current_statement__ = 8;
      assign(theta, K_M, "assigning variable theta", index_uni(6));
      current_statement__ = 9;
      assign(theta, V_0, "assigning variable theta", index_uni(7));
      current_statement__ = 10;
      assign(theta, 0, "assigning variable theta", index_uni(8));
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 11;
        assign(theta, rvalue(a_ex, "a_ex", index_uni(i)),
          "assigning variable theta", index_uni(8));
        current_statement__ = 12;
        assign(y,
          rvalue(
            algebra_solver_newton(system_functor__(), y_guess, theta, x_r, x_i,
  pstream__),
            "algebra_solver_newton(system, y_guess, theta, x_r,\nx_i)",
            index_uni(1)), "assigning variable y", index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(y[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"theta", "y"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(8)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(8) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(8) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = resistance_model_model_namespace::resistance_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return resistance_model_model_namespace::profiles__;
}

#endif


