
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace hier_log_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 30, column 2 to column 18)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 31, column 2 to column 13)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 32, column 2 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 36, column 2 to column 22)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 37, column 2 to column 22)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 38, column 2 to column 22)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 42, column 2 to column 29)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 43, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 44, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 48, column 2 to column 29)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 49, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 50, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 53, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 57, column 2 to column 30)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 58, column 2 to column 20)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 59, column 2 to column 22)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 63, column 2 to column 67)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 64, column 2 to column 52)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 65, column 2 to column 54)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 69, column 2 to column 85)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 70, column 2 to column 70)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 71, column 2 to column 72)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 110, column 2 to column 16)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 111, column 2 to column 17)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 112, column 2 to column 20)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 115, column 4 to column 113)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 116, column 4 to column 39)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 117, column 4 to column 51)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 114, column 16 to line 118, column 3)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 114, column 2 to line 118, column 3)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 77, column 2 to column 33)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 78, column 2 to column 25)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 79, column 2 to column 29)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 82, column 2 to column 26)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 83, column 2 to column 26)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 84, column 2 to column 26)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 88, column 2 to column 32)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 89, column 2 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 90, column 2 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 94, column 2 to column 32)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 95, column 2 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 96, column 2 to column 27)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 99, column 2 to column 30)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 100, column 10 to column 11)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 100, column 2 to column 13)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 101, column 13 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 101, column 2 to column 16)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 103, column 4 to column 109)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 104, column 4 to column 31)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 102, column 16 to line 105, column 3)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 102, column 2 to line 105, column 3)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 106, column 2 to column 24)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 12, column 2 to column 8)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 15, column 2 to column 10)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 16, column 2 to column 10)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 19, column 14 to column 17)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 19, column 2 to column 19)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 20, column 14 to column 15)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 20, column 2 to column 17)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 23, column 9 to column 10)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 23, column 2 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 24, column 9 to column 10)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 24, column 2 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 42, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 43, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 44, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 48, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 49, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 50, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 63, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 64, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 65, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 69, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 70, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 71, column 9 to column 12)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 110, column 13 to column 14)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 111, column 14 to column 15)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 112, column 17 to column 18)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 3, column 4 to column 40)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 4, column 4 to column 48)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 5, column 4 to column 23)",
                                                      " (in '/Users/tomroschinger/git/fit_seq/code/analysis/hier_log.stan', line 2, column 60 to line 6, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
logistic_growth(const T0__& t, const T1__& y0, const T2__& lambda,
                const T3__& K, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ num;
    num = DUMMY_VAR__;
    
    current_statement__ = 79;
    num = ((K * y0) * stan::math::exp((lambda * t)));
    local_scalar_t__ denum;
    denum = DUMMY_VAR__;
    
    current_statement__ = 80;
    denum = (K + (y0 * (stan::math::exp((lambda * t)) - 1)));
    current_statement__ = 81;
    return (num / denum);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logistic_growth_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& t, const T1__& y0, const T2__& lambda, const T3__& K,
           std::ostream* pstream__)  const 
{
return logistic_growth(t, y0, lambda, K, pstream__);
}
};

class hier_log_model final : public model_base_crtp<hier_log_model> {

 private:
  int N;
  int J_1;
  int J_2;
  std::vector<int> index_1;
  std::vector<int> index_2;
  std::vector<double> y;
  std::vector<double> t;
 
 public:
  ~hier_log_model() final { }
  
  std::string model_name() const final { return "hier_log_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  hier_log_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "hier_log_model_namespace::hier_log_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 53;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization","J_1","int",
          context__.to_vec());
      J_1 = std::numeric_limits<int>::min();
      
      current_statement__ = 54;
      J_1 = context__.vals_i("J_1")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization","J_2","int",
          context__.to_vec());
      J_2 = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      J_2 = context__.vals_i("J_2")[(1 - 1)];
      current_statement__ = 56;
      validate_non_negative_index("index_1", "J_2", J_2);
      current_statement__ = 57;
      context__.validate_dims("data initialization","index_1","int",
          context__.to_vec(J_2));
      index_1 = std::vector<int>(J_2, std::numeric_limits<int>::min());
      
      current_statement__ = 57;
      assign(index_1, nil_index_list(), context__.vals_i("index_1"),
        "assigning variable index_1");
      current_statement__ = 58;
      validate_non_negative_index("index_2", "N", N);
      current_statement__ = 59;
      context__.validate_dims("data initialization","index_2","int",
          context__.to_vec(N));
      index_2 = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 59;
      assign(index_2, nil_index_list(), context__.vals_i("index_2"),
        "assigning variable index_2");
      current_statement__ = 60;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 61;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 61;
      assign(y, nil_index_list(), context__.vals_r("y"),
        "assigning variable y");
      current_statement__ = 62;
      validate_non_negative_index("t", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(N));
      t = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 63;
      assign(t, nil_index_list(), context__.vals_r("t"),
        "assigning variable t");
      current_statement__ = 64;
      validate_non_negative_index("lambda_1_tilde", "J_1", J_1);
      current_statement__ = 65;
      validate_non_negative_index("K_1_tilde", "J_1", J_1);
      current_statement__ = 66;
      validate_non_negative_index("y01_tilde", "J_1", J_1);
      current_statement__ = 67;
      validate_non_negative_index("lambda_2_tilde", "J_2", J_2);
      current_statement__ = 68;
      validate_non_negative_index("K_2_tilde", "J_2", J_2);
      current_statement__ = 69;
      validate_non_negative_index("y02_tilde", "J_2", J_2);
      current_statement__ = 70;
      validate_non_negative_index("theta_lambda_1", "J_1", J_1);
      current_statement__ = 71;
      validate_non_negative_index("theta_K_1", "J_1", J_1);
      current_statement__ = 72;
      validate_non_negative_index("theta_y0_1", "J_1", J_1);
      current_statement__ = 73;
      validate_non_negative_index("theta_lambda_2", "J_2", J_2);
      current_statement__ = 74;
      validate_non_negative_index("theta_K_2", "J_2", J_2);
      current_statement__ = 75;
      validate_non_negative_index("theta_y0_2", "J_2", J_2);
      current_statement__ = 76;
      validate_non_negative_index("y_ppc", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("mu_ppc", "N", N);
      current_statement__ = 78;
      validate_non_negative_index("sigma_ppc", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += J_1;
      num_params_r__ += J_1;
      num_params_r__ += J_1;
      num_params_r__ += J_2;
      num_params_r__ += J_2;
      num_params_r__ += J_2;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "hier_log_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ log_lambda;
      log_lambda = DUMMY_VAR__;
      
      current_statement__ = 1;
      log_lambda = in__.scalar();
      local_scalar_t__ log_K;
      log_K = DUMMY_VAR__;
      
      current_statement__ = 2;
      log_K = in__.scalar();
      local_scalar_t__ log_y0;
      log_y0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      log_y0 = in__.scalar();
      local_scalar_t__ tau_l;
      tau_l = DUMMY_VAR__;
      
      current_statement__ = 4;
      tau_l = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        tau_l = stan::math::lb_constrain(tau_l, 0, lp__);
      } else {
        current_statement__ = 4;
        tau_l = stan::math::lb_constrain(tau_l, 0);
      }
      local_scalar_t__ tau_k;
      tau_k = DUMMY_VAR__;
      
      current_statement__ = 5;
      tau_k = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        tau_k = stan::math::lb_constrain(tau_k, 0, lp__);
      } else {
        current_statement__ = 5;
        tau_k = stan::math::lb_constrain(tau_k, 0);
      }
      local_scalar_t__ tau_y;
      tau_y = DUMMY_VAR__;
      
      current_statement__ = 6;
      tau_y = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        tau_y = stan::math::lb_constrain(tau_y, 0, lp__);
      } else {
        current_statement__ = 6;
        tau_y = stan::math::lb_constrain(tau_y, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_1_tilde;
      lambda_1_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(lambda_1_tilde, DUMMY_VAR__);
      
      current_statement__ = 7;
      lambda_1_tilde = in__.vector(J_1);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_1_tilde;
      K_1_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(K_1_tilde, DUMMY_VAR__);
      
      current_statement__ = 8;
      K_1_tilde = in__.vector(J_1);
      Eigen::Matrix<local_scalar_t__, -1, 1> y01_tilde;
      y01_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(y01_tilde, DUMMY_VAR__);
      
      current_statement__ = 9;
      y01_tilde = in__.vector(J_1);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_2_tilde;
      lambda_2_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(lambda_2_tilde, DUMMY_VAR__);
      
      current_statement__ = 10;
      lambda_2_tilde = in__.vector(J_2);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_2_tilde;
      K_2_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(K_2_tilde, DUMMY_VAR__);
      
      current_statement__ = 11;
      K_2_tilde = in__.vector(J_2);
      Eigen::Matrix<local_scalar_t__, -1, 1> y02_tilde;
      y02_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(y02_tilde, DUMMY_VAR__);
      
      current_statement__ = 12;
      y02_tilde = in__.vector(J_2);
      local_scalar_t__ sigma_0;
      sigma_0 = DUMMY_VAR__;
      
      current_statement__ = 13;
      sigma_0 = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        sigma_0 = stan::math::lb_constrain(sigma_0, 0, lp__);
      } else {
        current_statement__ = 13;
        sigma_0 = stan::math::lb_constrain(sigma_0, 0);
      }
      local_scalar_t__ Lambda;
      Lambda = DUMMY_VAR__;
      
      current_statement__ = 14;
      Lambda = pow(10, log_lambda);
      local_scalar_t__ K;
      K = DUMMY_VAR__;
      
      current_statement__ = 15;
      K = pow(10, log_K);
      local_scalar_t__ y0;
      y0 = DUMMY_VAR__;
      
      current_statement__ = 16;
      y0 = pow(10, log_y0);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_lambda_1;
      theta_lambda_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(theta_lambda_1, DUMMY_VAR__);
      
      current_statement__ = 17;
      assign(theta_lambda_1, nil_index_list(),
        add(log_lambda, multiply(tau_l, lambda_1_tilde)),
        "assigning variable theta_lambda_1");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_K_1;
      theta_K_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(theta_K_1, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(theta_K_1, nil_index_list(),
        add(log_K, multiply(tau_k, K_1_tilde)),
        "assigning variable theta_K_1");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_y0_1;
      theta_y0_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_1);
      stan::math::fill(theta_y0_1, DUMMY_VAR__);
      
      current_statement__ = 19;
      assign(theta_y0_1, nil_index_list(),
        add(log_y0, multiply(tau_y, y01_tilde)),
        "assigning variable theta_y0_1");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_lambda_2;
      theta_lambda_2 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(theta_lambda_2, DUMMY_VAR__);
      
      current_statement__ = 20;
      assign(theta_lambda_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_lambda_1,
              cons_list(index_multi(index_1), nil_index_list()),
              "theta_lambda_1"), multiply(tau_l, lambda_2_tilde))),
        "assigning variable theta_lambda_2");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_K_2;
      theta_K_2 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(theta_K_2, DUMMY_VAR__);
      
      current_statement__ = 21;
      assign(theta_K_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_K_1,
              cons_list(index_multi(index_1), nil_index_list()), "theta_K_1"),
            multiply(tau_k, K_2_tilde))), "assigning variable theta_K_2");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_y0_2;
      theta_y0_2 = Eigen::Matrix<local_scalar_t__, -1, 1>(J_2);
      stan::math::fill(theta_y0_2, DUMMY_VAR__);
      
      current_statement__ = 22;
      assign(theta_y0_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_y0_1,
              cons_list(index_multi(index_1), nil_index_list()),
              "theta_y0_1"), multiply(tau_y, y02_tilde))),
        "assigning variable theta_y0_2");
      {
        current_statement__ = 31;
        lp_accum__.add(normal_lpdf<propto__>(log_lambda, -2.8, 0.5));
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(log_K, 0, 0.1));
        current_statement__ = 33;
        lp_accum__.add(normal_lpdf<propto__>(log_y0, -1.5, 0.1));
        current_statement__ = 34;
        lp_accum__.add(normal_lpdf<propto__>(tau_l, 0, 0.01));
        current_statement__ = 35;
        lp_accum__.add(normal_lpdf<propto__>(tau_k, 0, 0.01));
        current_statement__ = 36;
        lp_accum__.add(normal_lpdf<propto__>(tau_y, 0, 0.01));
        current_statement__ = 37;
        lp_accum__.add(normal_lpdf<propto__>(lambda_1_tilde, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<propto__>(K_1_tilde, 0, 1));
        current_statement__ = 39;
        lp_accum__.add(normal_lpdf<propto__>(y01_tilde, 0, 1));
        current_statement__ = 40;
        lp_accum__.add(normal_lpdf<propto__>(lambda_2_tilde, 0, 1));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(K_2_tilde, 0, 1));
        current_statement__ = 42;
        lp_accum__.add(normal_lpdf<propto__>(y02_tilde, 0, 1));
        current_statement__ = 43;
        lp_accum__.add(normal_lpdf<propto__>(sigma_0, 0, pow(10, -10)));
        current_statement__ = 44;
        validate_non_negative_index("mu", "N", N);
        std::vector<local_scalar_t__> mu;
        mu = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
        
        current_statement__ = 46;
        validate_non_negative_index("sigma", "N", N);
        std::vector<local_scalar_t__> sigma;
        sigma = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
        
        current_statement__ = 51;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 48;
          assign(mu, cons_list(index_uni(i), nil_index_list()),
            logistic_growth(t[(i - 1)], theta_y0_2[(index_2[(i - 1)] - 1)],
              theta_lambda_2[(index_2[(i - 1)] - 1)],
              theta_K_2[(index_2[(i - 1)] - 1)], pstream__),
            "assigning variable mu");
          current_statement__ = 49;
          assign(sigma, cons_list(index_uni(i), nil_index_list()),
            (mu[(i - 1)] * sigma_0), "assigning variable sigma");}
        current_statement__ = 52;
        lp_accum__.add(normal_lpdf<propto__>(y, mu, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "hier_log_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      log_lambda = in__.scalar();
      double log_K;
      log_K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_K = in__.scalar();
      double log_y0;
      log_y0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      log_y0 = in__.scalar();
      double tau_l;
      tau_l = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      tau_l = in__.scalar();
      current_statement__ = 4;
      tau_l = stan::math::lb_constrain(tau_l, 0);
      double tau_k;
      tau_k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      tau_k = in__.scalar();
      current_statement__ = 5;
      tau_k = stan::math::lb_constrain(tau_k, 0);
      double tau_y;
      tau_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_y = in__.scalar();
      current_statement__ = 6;
      tau_y = stan::math::lb_constrain(tau_y, 0);
      Eigen::Matrix<double, -1, 1> lambda_1_tilde;
      lambda_1_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(lambda_1_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      lambda_1_tilde = in__.vector(J_1);
      Eigen::Matrix<double, -1, 1> K_1_tilde;
      K_1_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(K_1_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      K_1_tilde = in__.vector(J_1);
      Eigen::Matrix<double, -1, 1> y01_tilde;
      y01_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(y01_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      y01_tilde = in__.vector(J_1);
      Eigen::Matrix<double, -1, 1> lambda_2_tilde;
      lambda_2_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(lambda_2_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      lambda_2_tilde = in__.vector(J_2);
      Eigen::Matrix<double, -1, 1> K_2_tilde;
      K_2_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(K_2_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      K_2_tilde = in__.vector(J_2);
      Eigen::Matrix<double, -1, 1> y02_tilde;
      y02_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(y02_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      y02_tilde = in__.vector(J_2);
      double sigma_0;
      sigma_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_0 = in__.scalar();
      current_statement__ = 13;
      sigma_0 = stan::math::lb_constrain(sigma_0, 0);
      double Lambda;
      Lambda = std::numeric_limits<double>::quiet_NaN();
      
      double K;
      K = std::numeric_limits<double>::quiet_NaN();
      
      double y0;
      y0 = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> theta_lambda_1;
      theta_lambda_1 = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(theta_lambda_1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_K_1;
      theta_K_1 = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(theta_K_1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_y0_1;
      theta_y0_1 = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(theta_y0_1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_lambda_2;
      theta_lambda_2 = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(theta_lambda_2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_K_2;
      theta_K_2 = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(theta_K_2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_y0_2;
      theta_y0_2 = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(theta_y0_2, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(log_K);
      vars__.emplace_back(log_y0);
      vars__.emplace_back(tau_l);
      vars__.emplace_back(tau_k);
      vars__.emplace_back(tau_y);
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(lambda_1_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(K_1_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(y01_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(lambda_2_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(K_2_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(y02_tilde[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_0);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      Lambda = pow(10, log_lambda);
      current_statement__ = 15;
      K = pow(10, log_K);
      current_statement__ = 16;
      y0 = pow(10, log_y0);
      current_statement__ = 17;
      assign(theta_lambda_1, nil_index_list(),
        add(log_lambda, multiply(tau_l, lambda_1_tilde)),
        "assigning variable theta_lambda_1");
      current_statement__ = 18;
      assign(theta_K_1, nil_index_list(),
        add(log_K, multiply(tau_k, K_1_tilde)),
        "assigning variable theta_K_1");
      current_statement__ = 19;
      assign(theta_y0_1, nil_index_list(),
        add(log_y0, multiply(tau_y, y01_tilde)),
        "assigning variable theta_y0_1");
      current_statement__ = 20;
      assign(theta_lambda_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_lambda_1,
              cons_list(index_multi(index_1), nil_index_list()),
              "theta_lambda_1"), multiply(tau_l, lambda_2_tilde))),
        "assigning variable theta_lambda_2");
      current_statement__ = 21;
      assign(theta_K_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_K_1,
              cons_list(index_multi(index_1), nil_index_list()), "theta_K_1"),
            multiply(tau_k, K_2_tilde))), "assigning variable theta_K_2");
      current_statement__ = 22;
      assign(theta_y0_2, nil_index_list(),
        pow(10,
          add(
            rvalue(theta_y0_1,
              cons_list(index_multi(index_1), nil_index_list()),
              "theta_y0_1"), multiply(tau_y, y02_tilde))),
        "assigning variable theta_y0_2");
      if (emit_transformed_parameters__) {
        vars__.emplace_back(Lambda);
        vars__.emplace_back(K);
        vars__.emplace_back(y0);
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          vars__.emplace_back(theta_lambda_1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          vars__.emplace_back(theta_K_1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          vars__.emplace_back(theta_y0_1[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          vars__.emplace_back(theta_lambda_2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          vars__.emplace_back(theta_K_2[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          vars__.emplace_back(theta_y0_2[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> y_ppc;
      y_ppc = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> mu_ppc;
      mu_ppc = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> sigma_ppc;
      sigma_ppc = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 30;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        assign(mu_ppc, cons_list(index_uni(i), nil_index_list()),
          logistic_growth(t[(i - 1)], theta_y0_2[(index_2[(i - 1)] - 1)],
            theta_lambda_2[(index_2[(i - 1)] - 1)],
            theta_K_2[(index_2[(i - 1)] - 1)], pstream__),
          "assigning variable mu_ppc");
        current_statement__ = 27;
        assign(sigma_ppc, cons_list(index_uni(i), nil_index_list()),
          (mu_ppc[(i - 1)] * sigma_0), "assigning variable sigma_ppc");
        current_statement__ = 28;
        assign(y_ppc, cons_list(index_uni(i), nil_index_list()),
          normal_rng(mu_ppc[(i - 1)], sigma_ppc[(i - 1)], base_rng__),
          "assigning variable y_ppc");}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y_ppc[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(mu_ppc[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sigma_ppc[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double log_lambda;
      log_lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      log_lambda = context__.vals_r("log_lambda")[(1 - 1)];
      double log_K;
      log_K = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      log_K = context__.vals_r("log_K")[(1 - 1)];
      double log_y0;
      log_y0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      log_y0 = context__.vals_r("log_y0")[(1 - 1)];
      double tau_l;
      tau_l = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      tau_l = context__.vals_r("tau_l")[(1 - 1)];
      double tau_l_free__;
      tau_l_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      tau_l_free__ = stan::math::lb_free(tau_l, 0);
      double tau_k;
      tau_k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      tau_k = context__.vals_r("tau_k")[(1 - 1)];
      double tau_k_free__;
      tau_k_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      tau_k_free__ = stan::math::lb_free(tau_k, 0);
      double tau_y;
      tau_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_y = context__.vals_r("tau_y")[(1 - 1)];
      double tau_y_free__;
      tau_y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      tau_y_free__ = stan::math::lb_free(tau_y, 0);
      Eigen::Matrix<double, -1, 1> lambda_1_tilde;
      lambda_1_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(lambda_1_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_1_tilde_flat__;
        current_statement__ = 7;
        assign(lambda_1_tilde_flat__, nil_index_list(),
          context__.vals_r("lambda_1_tilde"),
          "assigning variable lambda_1_tilde_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          current_statement__ = 7;
          assign(lambda_1_tilde,
            cons_list(index_uni(sym1__), nil_index_list()),
            lambda_1_tilde_flat__[(pos__ - 1)],
            "assigning variable lambda_1_tilde");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> K_1_tilde;
      K_1_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(K_1_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> K_1_tilde_flat__;
        current_statement__ = 8;
        assign(K_1_tilde_flat__, nil_index_list(),
          context__.vals_r("K_1_tilde"),
          "assigning variable K_1_tilde_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          current_statement__ = 8;
          assign(K_1_tilde, cons_list(index_uni(sym1__), nil_index_list()),
            K_1_tilde_flat__[(pos__ - 1)], "assigning variable K_1_tilde");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> y01_tilde;
      y01_tilde = Eigen::Matrix<double, -1, 1>(J_1);
      stan::math::fill(y01_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y01_tilde_flat__;
        current_statement__ = 9;
        assign(y01_tilde_flat__, nil_index_list(),
          context__.vals_r("y01_tilde"),
          "assigning variable y01_tilde_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
          current_statement__ = 9;
          assign(y01_tilde, cons_list(index_uni(sym1__), nil_index_list()),
            y01_tilde_flat__[(pos__ - 1)], "assigning variable y01_tilde");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_2_tilde;
      lambda_2_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(lambda_2_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_2_tilde_flat__;
        current_statement__ = 10;
        assign(lambda_2_tilde_flat__, nil_index_list(),
          context__.vals_r("lambda_2_tilde"),
          "assigning variable lambda_2_tilde_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          current_statement__ = 10;
          assign(lambda_2_tilde,
            cons_list(index_uni(sym1__), nil_index_list()),
            lambda_2_tilde_flat__[(pos__ - 1)],
            "assigning variable lambda_2_tilde");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> K_2_tilde;
      K_2_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(K_2_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> K_2_tilde_flat__;
        current_statement__ = 11;
        assign(K_2_tilde_flat__, nil_index_list(),
          context__.vals_r("K_2_tilde"),
          "assigning variable K_2_tilde_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          current_statement__ = 11;
          assign(K_2_tilde, cons_list(index_uni(sym1__), nil_index_list()),
            K_2_tilde_flat__[(pos__ - 1)], "assigning variable K_2_tilde");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> y02_tilde;
      y02_tilde = Eigen::Matrix<double, -1, 1>(J_2);
      stan::math::fill(y02_tilde, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y02_tilde_flat__;
        current_statement__ = 12;
        assign(y02_tilde_flat__, nil_index_list(),
          context__.vals_r("y02_tilde"),
          "assigning variable y02_tilde_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
          current_statement__ = 12;
          assign(y02_tilde, cons_list(index_uni(sym1__), nil_index_list()),
            y02_tilde_flat__[(pos__ - 1)], "assigning variable y02_tilde");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      double sigma_0;
      sigma_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_0 = context__.vals_r("sigma_0")[(1 - 1)];
      double sigma_0_free__;
      sigma_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      sigma_0_free__ = stan::math::lb_free(sigma_0, 0);
      vars__.emplace_back(log_lambda);
      vars__.emplace_back(log_K);
      vars__.emplace_back(log_y0);
      vars__.emplace_back(tau_l_free__);
      vars__.emplace_back(tau_k_free__);
      vars__.emplace_back(tau_y_free__);
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(lambda_1_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(K_1_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        vars__.emplace_back(y01_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(lambda_2_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(K_2_tilde[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        vars__.emplace_back(y02_tilde[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_0_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("log_lambda");
    names__.emplace_back("log_K");
    names__.emplace_back("log_y0");
    names__.emplace_back("tau_l");
    names__.emplace_back("tau_k");
    names__.emplace_back("tau_y");
    names__.emplace_back("lambda_1_tilde");
    names__.emplace_back("K_1_tilde");
    names__.emplace_back("y01_tilde");
    names__.emplace_back("lambda_2_tilde");
    names__.emplace_back("K_2_tilde");
    names__.emplace_back("y02_tilde");
    names__.emplace_back("sigma_0");
    names__.emplace_back("Lambda");
    names__.emplace_back("K");
    names__.emplace_back("y0");
    names__.emplace_back("theta_lambda_1");
    names__.emplace_back("theta_K_1");
    names__.emplace_back("theta_y0_1");
    names__.emplace_back("theta_lambda_2");
    names__.emplace_back("theta_K_2");
    names__.emplace_back("theta_y0_2");
    names__.emplace_back("y_ppc");
    names__.emplace_back("mu_ppc");
    names__.emplace_back("sigma_ppc");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "log_K");
    param_names__.emplace_back(std::string() + "log_y0");
    param_names__.emplace_back(std::string() + "tau_l");
    param_names__.emplace_back(std::string() + "tau_k");
    param_names__.emplace_back(std::string() + "tau_y");
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_1_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "K_1_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y01_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_2_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "K_2_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y02_tilde" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_0");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Lambda");
      param_names__.emplace_back(std::string() + "K");
      param_names__.emplace_back(std::string() + "y0");
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_lambda_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_K_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_y0_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_lambda_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_K_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_y0_2" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_ppc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_ppc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_ppc" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "log_lambda");
    param_names__.emplace_back(std::string() + "log_K");
    param_names__.emplace_back(std::string() + "log_y0");
    param_names__.emplace_back(std::string() + "tau_l");
    param_names__.emplace_back(std::string() + "tau_k");
    param_names__.emplace_back(std::string() + "tau_y");
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_1_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "K_1_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y01_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_2_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "K_2_tilde" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y02_tilde" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_0");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Lambda");
      param_names__.emplace_back(std::string() + "K");
      param_names__.emplace_back(std::string() + "y0");
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_lambda_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_K_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_y0_1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_lambda_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_K_2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J_2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_y0_2" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_ppc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_ppc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_ppc" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_y0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"K_1_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"y01_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"lambda_2_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"K_2_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"y02_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta_lambda_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_K_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_y0_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_lambda_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_K_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_y0_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"mu_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigma_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_K\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_y0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_l\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"K_1_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"y01_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"parameters\"},{\"name\":\"lambda_2_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"K_2_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"y02_tilde\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta_lambda_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_K_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_y0_1\",\"type\":{\"name\":\"vector\",\"length\":" << J_1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_lambda_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_K_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_y0_2\",\"type\":{\"name\":\"vector\",\"length\":" << J_2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"mu_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigma_ppc\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = hier_log_model_namespace::hier_log_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


